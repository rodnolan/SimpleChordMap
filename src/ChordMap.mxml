<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   minWidth="281"
					   minHeight="708"
					   creationComplete="onCreationComplete(event)"
					   status="based on the maps found at http://www.chordmaps.com" 
					   xmlns:parsley="http://www.spicefactory.org/parsley">
	<fx:Declarations>
		<parsley:ContextBuilder>
			<parsley:FlexConfig type="{ parsleyConfig }" />
		</parsley:ContextBuilder>
		<parsley:Configure />
	</fx:Declarations>
	<fx:Style source="/styles/desktop.css" />
	
	<fx:Script>
		<![CDATA[
			import message.KeyChangeMessage;
			
			import model.KeysModel;
			import model.UIModel;
			
			import mx.events.FlexEvent;
			
			[Bindable]
			private var crdN1:String;
			[Bindable]
			private var crdN2:String;
			[Bindable]
			private var crdN3:String;
			[Bindable]
			private var crdN4:String;
			[Bindable]
			private var crdN5:String;
			[Bindable]
			private var crdN6:String;
			
			[Bindable]
			[Inject]
			public var uiModel:UIModel;

			[Bindable]
			[Inject]
			public var keysModel:KeysModel;
			
			[MessageDispatcher]
			public var dispatcher:Function;
			
			private var allKeys:Dictionary; 
			
			private var allSimpleMapKeys:Array;
			
			protected function onCreationComplete(event:FlexEvent):void {
				allSimpleMapKeys = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
				crdVars = [ "crdN1", "crdN2", "crdN3", "crdN4", "crdN5", "crdN6" ];
				
				allKeys = new Dictionary();
				
				allKeys["C"] = ["C","Dm","Em","F","G","Am"];
				allKeys["Db"] = ["Db","Ebm","Fm","Gb","Ab","Bbm"];
				allKeys["D"] = ["D","Em","F#m","Gm","A","Bm"];
				allKeys["Eb"] = ["Eb","Fm","Gm","Ab","Bb","Cm"];
				allKeys["E"] = ["E","F#m","G#m","A","B","C#m"];
				allKeys["F"] = ["F","Gm","Am","Bb","C","Dm"];
				allKeys["Gb"] = ["Gb","Abm","Bbm","C","D","Ebm"];
				allKeys["G"] = ["G","Am","Bm","C","D","Em"];
				allKeys["Ab"] = ["Ab","Bbm","Cm","Db","Eb","Fm"];
				allKeys["A"] = ["A","Bm","C#m","D","E","F#m"];
				allKeys["Bb"] = ["Bb","Cm","Dm","Eb","F","Gm"];
				allKeys["B"] = ["B","C#m","D#m","E","F#","G#m"];
				
				addKeyListeners();
				chordFields.setFocus();
				setupChordNames();
			}
			
			private var currentKeyIndex:uint = 0;
			private var crdNamesForSelectedKey:Array;
			private var crdVars:Array; 
			private function setupChordNames():void {
				if (currentKeyIndex >= 0 && currentKeyIndex < allSimpleMapKeys.length) {
					crdNamesForSelectedKey = allKeys[allSimpleMapKeys[currentKeyIndex]];
					crdVars.forEach(function (item:*, index:int, array:Array):void{
						this[item] = crdNamesForSelectedKey[index];
					}, this);
				}
			}
			
			private function addKeyListeners():void {
				this.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
			}
			
			[MessageHandler(selector="interval")]
			public function keyChangeByInterval(event:KeyChangeMessage):void {
				var intervalSize:int = event.intervalSize;
				if (intervalSize < 0) { // going backwards
					if (currentKeyIndex > 0) {
						currentKeyIndex--;
					} else { 
						currentKeyIndex = allSimpleMapKeys.length-1;
					}
				} else if (intervalSize > 0) { // going forwards
					if (currentKeyIndex < allSimpleMapKeys.length-1) {
						currentKeyIndex++;
					} else { 
						currentKeyIndex = 0;
					}					
				}
				setupChordNames();
			}
			[MessageHandler(selector="name")]
			public function keyChangeByName(event:KeyChangeMessage):void {
				currentKeyIndex = allSimpleMapKeys.indexOf(event.keyName);
				setupChordNames();
			}
			[MessageHandler(selector="index")]
			public function keyChangeByIndex(event:KeyChangeMessage):void {
				currentKeyIndex = event.keyIndex;
				setupChordNames();
			}
			
			private function onKeyDown(event:KeyboardEvent):void {
				var keyCode:int = event.keyCode;
				var desiredKey:String; 
				var keyThatWasPressed:String;
				trace(event.keyCode);

				switch (keyCode) {
					case Keyboard.C : 
					case Keyboard.D : 
					case Keyboard.E : 
					case Keyboard.F :  
					case Keyboard.G : 
					case Keyboard.A :  
					case Keyboard.B : 
						dispatcher(KeyChangeMessage.byKeyName(String.fromCharCode(event.keyCode)));
						break;

					case 188 : // < == b
						dispatcher(KeyChangeMessage.byInterval(-1));
						break;
					
					case 190 : // > == #
						dispatcher(KeyChangeMessage.byInterval(1));
						break;
					
					case 37 : // LEFT
					case 40 : // DOWN
						dispatcher(KeyChangeMessage.byInterval(-1));
						break;
					
					case 38 : // UP
					case 39 : // RIGHT
						dispatcher(KeyChangeMessage.byInterval(1));
						break;

					case 49 : // 1 == C
					case 50 : // 2 == Db
					case 51 : // 3 == D
					case 52 : // 4 == Eb
					case 53 : // 5 == E
					case 54 : // 6 == F
					case 55 : // 7 == Gb
					case 56 : // 8 == G
					case 57 : // 9 == Ab
						dispatcher(KeyChangeMessage.byKeyIndex(event.keyCode - 49));
						break;
					
					case 48 : // 0 == A
						dispatcher(KeyChangeMessage.byKeyIndex(9));
						break;
					
					case 189 : // 11 or - == Bb
						dispatcher(KeyChangeMessage.byKeyIndex(10));
						break;
					
					case 187 : // 12 or = == B
						dispatcher(KeyChangeMessage.byKeyIndex(11));
						break;
				}
				
				//trace("currentKeyIndex: " + currentKeyIndex);
				keySlider.value = currentKeyIndex;
				setupChordNames();
			}

			protected function onSliderChange(event:Event):void {
				currentKeyIndex = event.target.value;
				setupChordNames();
			}
			
			private function keySliderDataTipFormatter(value:Number):Object {
				return allSimpleMapKeys[keySlider.value]; 
			}
		]]>
	</fx:Script>


	<s:SkinnableContainer id="bg" skinClass="skins.AppBGSkin" >
		<s:HSlider id="keySlider" minimum="0" maximum="11" x="154" y="528" change="onSliderChange(event)" value="0" dataTipFormatFunction="keySliderDataTipFormatter" />
		<s:Label id="lblInstructions" x="156" y="547" width="98" height="111" fontSize="12"
				 text="{uiModel.instructions}"/>
	</s:SkinnableContainer>
		
	<s:Group id="chordFields">
		<s:Label id="crd1"  text="{crdN1}" x="23" y="536"  styleName="rootCrd"   />
		<s:Label id="crd2a" text="{crdN2}" x="40" y="31"   styleName="minorCrd"  />
		<s:Label id="crd2b" text="{crdN2}" x="165" y="345" styleName="minorCrd"  />
		<s:Label id="crd3"  text="{crdN3}" x="40" y="153"  styleName="minorCrd"  />
		<s:Label id="crd4"  text="{crdN4}" x="40" y="277"  styleName="majorCrd"  />
		<s:Label id="crd5a" text="{crdN5}" x="40" y="402"  styleName="majorCrd"  />
		<s:Label id="crd5b" text="{crdN5}" x="165" y="98"  styleName="majorCrd"  />
		<s:Label id="crd6"  text="{crdN6}" x="165" y="221" styleName="minorCrd"  />
	</s:Group>

</s:WindowedApplication>
