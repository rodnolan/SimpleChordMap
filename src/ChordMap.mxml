<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   minWidth="281"
					   minHeight="708"
					   creationComplete="onCreationComplete(event)"
					   status="based on the maps found at http://www.chordmaps.com">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			[Bindable]
			private var crdColor:uint = 0x0000FF;
			[Bindable]
			private var fontSizeFirst:uint = 64;
			[Bindable]
			private var fontSizeBig:uint = 54;
			[Bindable]
			private var fontSizeSmall:uint = 36;
			
			[Bindable]
			private var instructions:String = "Drag the slider button, use your arrow keys or type the name of a major key to generate a simple map";
			

			[Bindable]
			private var crdN1:String;
			[Bindable]
			private var crdN2:String;
			[Bindable]
			private var crdN3:String;
			[Bindable]
			private var crdN4:String;
			[Bindable]
			private var crdN5:String;
			[Bindable]
			private var crdN6:String;
			
			private var allKeys:Dictionary; 
			
			
			private var crdNamesForSelectedKey:Array;
			private var currentKeyIndex:uint = 0;
			private var currentKey:String;
			private var allSimpleMapKeys:Array;
			private var crdVars:Array; 
			
			protected function onCreationComplete(event:FlexEvent):void {
				allSimpleMapKeys = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
				crdVars = [ "crdN1", "crdN2", "crdN3", "crdN4", "crdN5", "crdN6" ];
				
				allKeys = new Dictionary();
				
				allKeys["C"] = ["C","Dm","Em","F","G","Am"];
				allKeys["Db"] = ["Db","Ebm","Fm","Gb","Ab","Bbm"];
				allKeys["D"] = ["D","Em","F#m","Gm","A","Bm"];
				allKeys["Eb"] = ["Eb","Fm","Gm","Ab","Bb","Cm"];
				allKeys["E"] = ["E","F#m","G#m","A","B","C#m"];
				allKeys["F"] = ["F","Gm","Am","Bb","C","Dm"];
				allKeys["Gb"] = ["Gb","Abm","Bbm","C","D","Ebm"];
				allKeys["G"] = ["G","Am","Bm","C","D","Em"];
				allKeys["Ab"] = ["Ab","Bbm","Cm","Db","Eb","Fm"];
				allKeys["A"] = ["A","Bm","C#m","D","E","F#m"];
				allKeys["Bb"] = ["Bb","Cm","Dm","Eb","F","Gm"];
				allKeys["B"] = ["B","C#m","D#m","E","F#","G#m"];
				
				addKeyListeners();
				keySlider.setFocus();
				allUIComponents.setFocus();
				setupChordNames();
			}
			
			private function setupChordNames():void {
				if (currentKeyIndex >= 0 && currentKeyIndex < allSimpleMapKeys.length) {
					crdNamesForSelectedKey = allKeys[allSimpleMapKeys[currentKeyIndex]];
					crdVars.forEach(function (item:*, index:int, array:Array):void{
						this[item] = crdNamesForSelectedKey[index];
					}, this);
				}
			}
			
			private function addKeyListeners():void {
				this.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
			}

			private function onKeyDown(event:KeyboardEvent):void {
				var keyCode:int = event.keyCode;
				var desiredKey:String; 
				var keyThatWasPressed:String;

				switch (keyCode) {
					case Keyboard.C : // index 0;  key 1
					case Keyboard.D : // index 2;  key 3
					case Keyboard.E : // index 4;  key 5
					case Keyboard.F : // index 5;  key 6 
					case Keyboard.G : // index 7;  key 8
					case Keyboard.A : // index 9;  key 0 
					case Keyboard.B : // index 11; key 
						keyThatWasPressed = String.fromCharCode(event.keyCode); 
						currentKeyIndex = allSimpleMapKeys.indexOf(keyThatWasPressed);
						trace("desiredKey: " + keyThatWasPressed + " " + "(" + keyCode  + ")" + " was requested from index " + currentKeyIndex);
						break;
					
					case 37 : // LEFT
					case 40 : // DOWN
						keyThatWasPressed = "left or down";
						trace("desiredKey: " + keyThatWasPressed + " " + "(" + keyCode  + ")" + " was requested from index " + currentKeyIndex);
						
						if (currentKeyIndex > 0) {
							currentKeyIndex--;
						} else { 
							currentKeyIndex = allSimpleMapKeys.length-1;
						}
						break;
					
					case 38 : // UP
					case 39 : // RIGHT
						keyThatWasPressed = "right or up";
						trace("desiredKey: " + keyThatWasPressed + " " + "(" + keyCode  + ")" + " was requested from index " + currentKeyIndex);
						if (currentKeyIndex < allSimpleMapKeys.length-1) {
							currentKeyIndex++;
						} else { 
							currentKeyIndex = 0;
						}
						break;

					case 49 : // 1 == C
					case 50 : // 2 == Db
					case 51 : // 3 == D
					case 52 : // 4 == Eb
					case 53 : // 5 == E
					case 54 : // 6 == F
					case 55 : // 7 == Gb
					case 56 : // 8 == G
					case 57 : // 9 == Ab
						keyThatWasPressed = String.fromCharCode(event.keyCode);
						currentKeyIndex = event.keyCode - 49;
						trace("desiredKey: " + keyThatWasPressed + " " + "(" + keyCode  + ")" + " was requested from index " + currentKeyIndex);
						break;
					
					case 48 : // 0 == A
						trace(event.keyCode)
						currentKeyIndex = 9;
						break;
					
					case 189 : // 11 or - == Bb
						trace(event.keyCode)
						currentKeyIndex = 10;
						break;
					
					case 187 : // 12 or = == B
						trace(event.keyCode)
						currentKeyIndex = 11;
						break;
				}
				
				trace("currentKeyIndex: " + currentKeyIndex);
				keySlider.value = currentKeyIndex;
				setupChordNames();
			}

			protected function onSliderChange(event:Event):void {
				currentKeyIndex = event.target.value;
				setupChordNames();
			}
			
			private function keySliderDataTipFormatter(value:Number):Object {
//				var keyAsString:String = allSimpleMapKeys[keySlider.value];
//				var idx:int = allSimpleMapKeys.indexOf(keyAsString);
//				return keyAsString + "[" + idx + "]"; 
				return allSimpleMapKeys[keySlider.value]; 
			}
		]]>
	</fx:Script>

	<s:SkinnableContainer id="bg" skinClass="skins.AppBGSkin" >
		<s:HSlider id="keySlider" minimum="0" maximum="11" x="154" y="528" change="onSliderChange(event)" value="0" dataTipFormatFunction="keySliderDataTipFormatter" />
		<s:Label id="lblInstructions" x="156" y="547" width="98" height="111" fontSize="12"
				 text="{instructions}"/>
	</s:SkinnableContainer>
		
	<s:Group id="allUIComponents">
		<s:Label id="crd1" text="{crdN1}" x="23" y="536" fontSize="{fontSizeFirst}" fontWeight="bold" color="{crdColor}" />
		<s:Label id="crd2a" text="{crdN2}" x="40" y="31" fontSize="{fontSizeSmall}" fontWeight="bold" color="{crdColor}" />
		<s:Label id="crd2b" text="{crdN2}" x="165" y="345" fontSize="{fontSizeSmall}" fontWeight="bold" color="{crdColor}" />
		<s:Label id="crd3" text="{crdN3}" x="40" y="153" fontSize="{fontSizeSmall}" fontWeight="bold" color="{crdColor}" />
		<s:Label id="crd4" text="{crdN4}" x="40" y="277" fontSize="{fontSizeBig}" fontWeight="bold" color="{crdColor}" />
		<s:Label id="crd5a" text="{crdN5}" x="40" y="402" fontSize="{fontSizeBig}" fontWeight="bold" color="{crdColor}" />
		<s:Label id="crd5b" text="{crdN5}" x="165" y="98" fontSize="{fontSizeBig}" fontWeight="bold" color="{crdColor}" />
		<s:Label id="crd6" text="{crdN6}" x="165" y="221" fontSize="{fontSizeSmall}" fontWeight="bold" color="{crdColor}" />
	</s:Group>

</s:WindowedApplication>
